"""ƒêi·ªÉm kh·ªüi ƒë·∫ßu c·ªßa ·ª©ng d·ª•ng FastAPI v·ªõi t√†i li·ªáu Swagger ƒë∆∞·ª£c c·∫£i thi·ªán."""

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.openapi.utils import get_openapi

from api.router import router as api_router
from config.settings import config
from core.logging_config import get_logger

logger = get_logger(__name__)

# M√¥ t·∫£ ·ª©ng d·ª•ng ƒë∆∞·ª£c c·∫£i thi·ªán
description = """
üè• **D·ªãch V·ª• AI Qu·∫£n L√Ω ChƒÉm S√≥c Ti·ªÉu ƒê∆∞·ªùng**

API n√†y cung c·∫•p c√°c d·ªãch v·ª• th√¥ng minh cho vi·ªác t·∫°o k·∫ø ho·∫°ch chƒÉm s√≥c ti·ªÉu ƒë∆∞·ªùng v√† ph√¢n t√≠ch k·∫øt qu·∫£ ƒëo.

## T√≠nh NƒÉng

* **üéØ T·∫°o K·∫ø Ho·∫°ch ChƒÉm S√≥c**: T·∫°o l·ªãch ƒëo th√¥ng s·ªë y t·∫ø c√° nh√¢n h√≥a d·ª±a tr√™n d·ªØ li·ªáu b·ªánh nh√¢n
* **üìä Ph√¢n T√≠ch K·∫øt Qu·∫£ ƒêo**: Ph√¢n t√≠ch k·∫øt qu·∫£ ƒëo c·ªßa b·ªánh nh√¢n v·ªõi ph·∫£n h·ªìi ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi AI
* **üîç Theo D√µi S·ª©c Kh·ªèe**: Theo d√µi v√† gi√°m s√°t c√°c ch·ªâ s·ªë s·ª©c kh·ªèe c·ªßa b·ªánh nh√¢n

## Gi·ªõi H·∫°n T·ªëc ƒê·ªô

Hi·ªán t·∫°i ch∆∞a c√≥ gi·ªõi h·∫°n t·ªëc ƒë·ªô n√†o ƒë∆∞·ª£c √°p d·ª•ng.
"""

# T·∫°o ·ª©ng d·ª•ng FastAPI v·ªõi c·∫•u h√¨nh ƒë∆∞·ª£c c·∫£i thi·ªán
app = FastAPI(
    title="Diabetes AI Service",
    description="AI Service for Diabetes Management",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    license_info={
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT",
    },
    servers=[
        {"url": "http://localhost:8000", "description": ""},
    ],
)

# C·∫•u h√¨nh CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Cho ph√©p t·∫•t c·∫£ origins
    allow_credentials=True,  # Cho ph√©p credentials (cookies, etc.)
    allow_methods=["*"],  # Cho ph√©p t·∫•t c·∫£ HTTP methods
    allow_headers=["*"],  # Cho ph√©p t·∫•t c·∫£ headers
    expose_headers=["*"],  # Expose t·∫•t c·∫£ headers cho client
)

# Bao g·ªìm c√°c route API
app.include_router(api_router, prefix="/api/v1")


@app.on_event("startup")
async def startup_event():
    """X·ª≠ l√Ω s·ª± ki·ªán kh·ªüi ƒë·ªông ·ª©ng d·ª•ng."""
    logger.info(f"ƒêang kh·ªüi ƒë·ªông {config['app_title']} v{config['app_version']}")
    logger.info("Kh·ªüi ƒë·ªông ·ª©ng d·ª•ng ho√†n t·∫•t")


@app.on_event("shutdown")
async def shutdown_event():
    """X·ª≠ l√Ω s·ª± ki·ªán t·∫Øt ·ª©ng d·ª•ng."""
    logger.info("B·∫Øt ƒë·∫ßu t·∫Øt ·ª©ng d·ª•ng")


@app.get(
    "/health",
    summary="üè• Ki·ªÉm Tra S·ª©c Kh·ªèe",
    description="Ki·ªÉm tra tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa d·ªãch v·ª• AI",
    tags=["H·ªá Th·ªëng"],
    responses={
        200: {
            "description": "D·ªãch v·ª• ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng",
            "content": {
                "application/json": {
                    "example": {
                        "status": "healthy",
                        "service": "AI Service - CarePlan Generator",
                        "version": "1.0.0",
                    }
                }
            },
        }
    },
)
async def health_check():
    """Endpoint ki·ªÉm tra s·ª©c kh·ªèe ƒë·ªÉ gi√°m s√°t tr·∫°ng th√°i d·ªãch v·ª•."""
    return {
        "status": "healthy",
        "service": config["app_title"],
        "version": config["app_version"],
    }


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=5023)
